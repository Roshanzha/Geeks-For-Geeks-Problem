

/* node class of the linked list

class Node
{
    int data;
    Node next;
    Node(int key)
    {
        data = key;
        next = null;
    }
}

*/


class Solution {
    // Function to pairwise swap elements of a linked list.
    // It should return the head of the modified list
    public Node pairwiseSwap(Node head) {
        // If the list is empty or has only one node, no need to swap
        if (head == null || head.next == null) {
            return head;
        }

        // Initialize previous and current pointers
        Node prev = head;
        Node current = head.next;

        // Update the head to the second node
        head = current;

        while (true) {
            Node next = current.next;
            
            // Adjust the next pointers to perform the swap
            current.next = prev;

            // If the next pair is null or reaches the end of the list
            if (next == null || next.next == null) {
                prev.next = next;
                break;
            }

            // Adjust the next pointer of the previous pair
            prev.next = next.next;

            // Move to the next pair
            prev = next;
            current = next.next;
        }

        return head;
    }
}
