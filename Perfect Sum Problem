class Solution{
    int ans=0;
    int modulo=1000000000+7;
	public int perfectSum(int arr[],int n, int sum) 
	{ 
	    // Your code goes here
	   // ArrayList<Integer>ls=new ArrayList<>();
	   // utilSolve(arr,n,0,sum,ls);
	   // int val=ans;
	   // ans=0;
	   // return val;
	   return solveViaDp(arr,n,sum);
	} 
	public void utilSolve(int[]arr,int n,int index,int sum,ArrayList<Integer>container){
	    //base case
	    if(index==n){
	        if(checkAnsOrNot(container,sum)){
	            ans=ans%modulo +1;
	        }
	        return;
	    }
	    container.add(arr[index]);
	    utilSolve(arr,n,index+1,sum,container);
	    container.remove(container.size()-1);
	    utilSolve(arr,n,index+1,sum,container);
	}
	public boolean checkAnsOrNot(ArrayList<Integer>arr,int s){
	    int val=0;
	    for(int i=0;i<arr.size();i++){
	        val+=arr.get(i);
	    }
	    return val==s;
	}
	 public int solveViaDp(int arr[],int n, int sum) 
    { 
        // Your code goes here
        int mod = 1000000007;
        int[][] dp = new int[n + 1][sum + 1];
        
        // Initialize the dp array
        for (int i = 0; i <= n; i++) {
            dp[i][0] = 1; // There is one way to make sum 0 with any subset (by choosing no elements)
        }
        
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j <= sum; j++) {
                if (arr[i - 1] <= j) {
                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]) % mod;
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }
        
        return dp[n][sum];
    }
}
